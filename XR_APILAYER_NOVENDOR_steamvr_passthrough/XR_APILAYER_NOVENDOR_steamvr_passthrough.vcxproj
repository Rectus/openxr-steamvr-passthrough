<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DisableFastUpToDateCheck>True</DisableFastUpToDateCheck>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <ProjectGuid>{93d573d0-634f-4ba0-8fe0-fb63d7d00a05}</ProjectGuid>
    <RootNamespace>XRAPILAYERNOVENDORtemplate</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
    <OutDir>$(SolutionDir)\bin\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)\obj\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
    <OutDir>$(SolutionDir)\bin\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)\obj\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>LAYER_NAMESPACE=steamvr_passthrough;_DEBUG;_WINDOWS;_USRDLL;_CRT_SECURE_NO_WARNINGS;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)framework;$(SolutionDir)\external\OpenXR-SDK\include;$(SolutionDir)\external\OpenXR-SDK\src\common;$(SolutionDir)\external\openvr\headers;$(SolutionDir)\external\lodepng;$(SolutionDir)\external\imgui;$(SolutionDir)\external\imgui\backends;$(SolutionDir)\external\simpleini;$(SolutionDir)\external\opencv\build\include;$(VULKAN_SDK)\Include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <AdditionalModuleDependencies>
      </AdditionalModuleDependencies>
      <AdditionalBMIDirectories>
      </AdditionalBMIDirectories>
      <AdditionalHeaderUnitDependencies>
      </AdditionalHeaderUnitDependencies>
      <ScanSourceForModuleDependencies>false</ScanSourceForModuleDependencies>
      <TranslateIncludes>false</TranslateIncludes>
      <Optimization>Disabled</Optimization>
      <InlineFunctionExpansion>Default</InlineFunctionExpansion>
      <IntrinsicFunctions>false</IntrinsicFunctions>
      <FavorSizeOrSpeed>Neither</FavorSizeOrSpeed>
      <WholeProgramOptimization>false</WholeProgramOptimization>
      <BasicRuntimeChecks>Default</BasicRuntimeChecks>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableUAC>false</EnableUAC>
      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;d3d11.lib;d3d12.lib;dxgi.lib;vulkan-1.lib;openvr_api.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;pathcch.lib;opencv_world470d.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(SolutionDir)\external\openvr\lib\win64;$(SolutionDir)\external\opencv\build\x64\vc16\lib;$(VULKAN_SDK)\Lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <DelayLoadDLLs>openvr_api.dll;%(DelayLoadDLLs)</DelayLoadDLLs>
    </Link>
    <PostBuildEvent>
      <Command>copy $(ProjectDir)\$(ProjectName).json $(OutDir)
copy $(ProjectDir)\testpattern.png $(OutDir)
copy $(ProjectDir)\passthrough_icon.png $(OutDir)
copy $(SolutionDir)\readme.md $(OutDir)
</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy dependencies...</Message>
    </PostBuildEvent>
    <PreLinkEvent>
      <Command>
      </Command>
    </PreLinkEvent>
    <PreLinkEvent>
      <Message>
      </Message>
    </PreLinkEvent>
    <PreBuildEvent>
      <Command>call $(ProjectDir)prebuild_commands.bat</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Executing prebuild commands...</Message>
    </PreBuildEvent>
    <FxCompile>
      <ShaderModel>5.0</ShaderModel>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <DisableOptimizations>false</DisableOptimizations>
      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </FxCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>LAYER_NAMESPACE=steamvr_passthrough;NDEBUG;_WINDOWS;_USRDLL;_CRT_SECURE_NO_WARNINGS;_DISABLE_CONSTEXPR_MUTEX_CONSTRUCTOR;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <PrecompiledHeader>Use</PrecompiledHeader>
      <PrecompiledHeaderFile>pch.h</PrecompiledHeaderFile>
      <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)shaders;$(ProjectDir)framework;$(SolutionDir)\external\OpenXR-SDK\include;$(SolutionDir)\external\OpenXR-SDK\src\common;$(SolutionDir)\external\openvr\headers;$(SolutionDir)\external\lodepng;$(SolutionDir)\external\imgui;$(SolutionDir)\external\imgui\backends;$(SolutionDir)\external\simpleini;$(SolutionDir)\external\opencv\build\include;$(VULKAN_SDK)\Include</AdditionalIncludeDirectories>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
    </ClCompile>
    <Link>
      <SubSystem>Windows</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <EnableUAC>false</EnableUAC>
      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;d3d11.lib;d3d12.lib;dxgi.lib;vulkan-1.lib;openvr_api64.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;pathcch.lib;opencv_world4100.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalLibraryDirectories>$(SolutionDir)\external\openvr\lib\win64;$(SolutionDir)\external\opencv\build\x64\vc16\lib;$(VULKAN_SDK)\Lib;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <DelayLoadDLLs>
      </DelayLoadDLLs>
    </Link>
    <PostBuildEvent>
      <Command>copy $(ProjectDir)\$(ProjectName).json $(OutDir)
copy $(SolutionDir)\readme.md $(OutDir)
</Command>
    </PostBuildEvent>
    <PostBuildEvent>
      <Message>Copy dependencies...</Message>
    </PostBuildEvent>
    <PreLinkEvent>
      <Command>
      </Command>
    </PreLinkEvent>
    <PreLinkEvent>
      <Message>
      </Message>
    </PreLinkEvent>
    <PreBuildEvent>
      <Command>call $(ProjectDir)prebuild_commands.bat</Command>
    </PreBuildEvent>
    <PreBuildEvent>
      <Message>Executing prebuild commands...</Message>
    </PreBuildEvent>
    <FxCompile>
      <ShaderModel>5.0</ShaderModel>
    </FxCompile>
    <FxCompile>
      <ObjectFileOutput />
      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </FxCompile>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClInclude Include="..\external\imgui\backends\imgui_impl_dx11.h" />
    <ClInclude Include="..\external\imgui\backends\imgui_impl_dx12.h" />
    <ClInclude Include="..\external\imgui\imconfig.h" />
    <ClInclude Include="..\external\imgui\imgui.h" />
    <ClInclude Include="..\external\imgui\imgui_internal.h" />
    <ClInclude Include="..\external\lodepng\lodepng.h" />
    <ClInclude Include="camera_enumerator.h" />
    <ClInclude Include="camera_manager.h" />
    <ClInclude Include="check.h" />
    <ClInclude Include="config_manager.h" />
    <ClInclude Include="dashboard_menu.h" />
    <ClInclude Include="depth_reconstruction.h" />
    <ClInclude Include="framework\dispatch.gen.h" />
    <ClInclude Include="framework\dispatch.h" />
    <ClInclude Include="framework\log.h" />
    <ClInclude Include="framework\util.h" />
    <ClInclude Include="mesh.h" />
    <ClInclude Include="openvr_manager.h" />
    <ClInclude Include="passthrough_renderer.h" />
    <ClInclude Include="layer.h" />
    <ClInclude Include="pch.h" />
    <ClInclude Include="resource.h" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="..\external\imgui\backends\imgui_impl_dx11.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\imgui\backends\imgui_impl_dx12.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\imgui\imgui.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\imgui\imgui_draw.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\imgui\imgui_tables.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\imgui\imgui_widgets.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\external\lodepng\lodepng.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">NotUsing</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="camera_enumerator.cpp" />
    <ClCompile Include="camera_manager_opencv.cpp" />
    <ClCompile Include="camera_manager_openvr.cpp" />
    <ClCompile Include="config_manager.cpp" />
    <ClCompile Include="dashboard_menu.cpp" />
    <ClCompile Include="depth_reconstruction.cpp" />
    <ClCompile Include="framework\dispatch.cpp" />
    <ClCompile Include="framework\dispatch.gen.cpp" />
    <ClCompile Include="framework\entry.cpp" />
    <ClCompile Include="framework\log.cpp" />
    <ClCompile Include="mesh.cpp" />
    <ClCompile Include="openvr_manager.cpp" />
    <ClCompile Include="passthrough_renderer_dx11.cpp" />
    <ClCompile Include="passthrough_renderer_dx11_interop.cpp" />
    <ClCompile Include="passthrough_renderer_dx12.cpp" />
    <ClCompile Include="layer.cpp" />
    <ClCompile Include="passthrough_renderer_vulkan.cpp" />
    <ClCompile Include="pch.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <CopyFileToFolders Include="..\external\openvr\bin\win64\openvr_api.pdb">
      <FileType>Document</FileType>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
    </CopyFileToFolders>
    <None Include="framework\dispatch_generator.py" />
    <None Include="framework\layer_apis.py" />
  </ItemGroup>
  <ItemGroup>
    <FxCompile Include="shaders\alpha_prepass_masked_ps.hlsl">
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_AlphaPrepassMaskedShaderPS</VariableName>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">5.0</ShaderModel>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\alpha_prepass_masked_ps.h</HeaderFileOutput>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\alpha_prepass_masked_ps.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Release|x64'">5.0</ShaderModel>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_AlphaPrepassMaskedShaderPS</VariableName>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
      </ObjectFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\alpha_prepass_ps.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\alpha_prepass_ps.h</HeaderFileOutput>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_AlphaPrepassShaderPS</VariableName>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_AlphaPrepassShaderPS</VariableName>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\alpha_prepass_ps.h</HeaderFileOutput>
    </FxCompile>
    <None Include="shaders\common_vs.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Vertex</ShaderType>
      <FileType>Document</FileType>
    </None>
    <None Include="shaders\common_ps.hlsl">
      <FileType>Document</FileType>
    </None>
    <FxCompile Include="shaders\alpha_copy_masked_ps.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">5.0</ShaderModel>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\passthrough_masked_ps.h</HeaderFileOutput>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_PassthroughMaskedShaderPS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\alpha_copy_masked_ps.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_AlphaCopyMaskedShaderPS</VariableName>
    </FxCompile>
    <FxCompile Include="shaders\depth_write_ps.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_depthWriteShaderPS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\depth_write_ps.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\fill_holes_cs.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Compute</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_FillHolesShaderCS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\fill_holes_cs.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\fullscreen_quad_vs.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Vertex</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_FullscreenQuadShaderVS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\fullscreen_quad_vs.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\mesh_rigid_vs.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\mesh_rigid_vs.h</HeaderFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_MeshRigidShaderVS</VariableName>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_ps.hlsl">
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_PassthroughShaderPS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\passthrough_ps.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Pixel</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">5.0</ShaderModel>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_ps.h</HeaderFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughShaderPS</VariableName>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_read_depth_vs.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughReadDepthShaderVS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders/passthrough_read_depth_vs.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_stereo_composite_ps.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughStereoCompositePS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_stereo_composite_ps.h</HeaderFileOutput>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_stereo_composite_temporal_ps.hlsl">
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_stereo_composite_temporal_ps.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughStereoCompositeTemporalPS</VariableName>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_stereo_temporal_vs.hlsl">
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_stereo_temporal_vs.h</HeaderFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughStereoTemporalShaderVS</VariableName>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_stereo_vs.hlsl">
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\passthrough_stereo_vs.h</HeaderFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_PassthroughStereoShaderVS</VariableName>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Vertex</ShaderType>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_stereo_vs.h</HeaderFileOutput>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughStereoShaderVS</VariableName>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_temporal_ps.hlsl">
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_temporal_ps.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Pixel</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughTemporalShaderPS</VariableName>
    </FxCompile>
    <FxCompile Include="shaders\passthrough_vs.hlsl">
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">g_PassthroughShaderVS</VariableName>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">shaders\passthrough_vs.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Vertex</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">5.0</ShaderModel>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <HeaderFileOutput Condition="'$(Configuration)|$(Platform)'=='Release|x64'">shaders\passthrough_vs.h</HeaderFileOutput>
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Vertex</ShaderType>
      <VariableName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">g_PassthroughShaderVS</VariableName>
    </FxCompile>
    <None Include="shaders\util.hlsl">
      <ShaderType Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Library</ShaderType>
      <ShaderModel Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">5.0</ShaderModel>
      <ObjectFileOutput Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </ObjectFileOutput>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</ExcludedFromBuild>
      <EntryPointName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
      </EntryPointName>
      <FileType>Document</FileType>
      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</ExcludedFromBuild>
    </None>
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="XR_APILAYER_NOVENDOR_steamvr_passthrough.rc" />
  </ItemGroup>
  <ItemGroup>
    <Image Include="passthrough_icon.png" />
    <Image Include="testpattern.png" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\packages\fmt.7.0.1\build\fmt.targets" Condition="Exists('..\packages\fmt.7.0.1\build\fmt.targets')" />
    <Import Project="..\packages\Microsoft.Windows.ImplementationLibrary.1.0.220201.1\build\native\Microsoft.Windows.ImplementationLibrary.targets" Condition="Exists('..\packages\Microsoft.Windows.ImplementationLibrary.1.0.220201.1\build\native\Microsoft.Windows.ImplementationLibrary.targets')" />
  </ImportGroup>
</Project>